# -*- coding: utf-8 -*-
"""p1feladatsor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/feladatbank/python1/blob/main/p1feladatsor.ipynb

---
**30 darab véletlenszám**
*   Írj egy programot, amely [1;12] intervallumon állít elő 30 darab véletlenszámot! 
* A képernyőre kizárólag csak az 5-el oszthatóakat írja ki,
* jelenítse meg az összes véletlen generált számot 
* informálja a felhasználót arról is, hány darab ilyen szám volt.
"""

# ZamArtem  30random.py
"""
Írj egy programot, amely [1;12] intervallumon állít elő 30 darab véletlenszámot! 
A képernyőre kizárólag csak az 5-el oszthatóakat írja ki, majd jelenítse meg az összes véletlen
generált számot és a végén informálja a felhasználót arról is, hány darab ilyen szám volt.
"""

"""---
**Páros - páratlan**

* A program a felhasználótól bekér egy egész számot, 
* majd megvizsgálja, hogy a megadott szám:

> pozitív páros vagy

> negatív páratlan.

* Az eredményről tájékoztatja a felhasználót.
Pld:

```
Kérek egy számot: 2
Pozitív páros.
------------------------
Kérek egy számot: -1
Negatív páratlan.
```
"""

# ZamArtem Pozitív_páros.py  Update and rename p1adam_001 to Pozitív_páros.py
'''1. Feladat
Készíts egy programot, amely a felhasználótól bekér egy egész számot, majd megvizsgálja, hogy a megadott szám
- pozitív páros vagy
- negatív páratlan.
Az eredményről tájékoztatja a felhasználót.
Pld:
------------------------
Kérek egy számot: 2
Pozitív páros.
------------------------
Kérek egy számot: -1
Negatív páratlan.
'''

"""---
**Abszolút érték függvény**

Hozzon létre egy olyan függvényt, amely visszatér az abszolút értékkel!
"""

#loczylevi abszolut.py Rename p1noel_003 to abszolut.py
'''
Hozzon létre egy olyan függvényt, amely visszatér az abszolút értékkel!
'''

"""---
**Betű a szóban**
* A program tároljon el egy szót egy változóban. 
* A felhasználó adjon meg egy betűt, amiről a program döntse el, hogy előfordul-e a szóban! 
* Az eredményről tájékoztassa a felhasználót, és írja ki a tárolt szót is!
   
* A felhasználónak többször is legyen lehetősége újabb tippet megadnia. 
* A bekérés addig folytatódjon, amíg a felhasználó nem ad meg betűt, csupán egy ENTER-t üt!   

* Igyekezz minél felhasználóbarátabbá tenni a programot! 
* A programnak lehetnek egyéb hasznos funkciói, például gyűjtheti és kiírhatja a jó és a rossz tippeket (betűket).
"""

# ZamArtem betu_a_szoban.py
'''A program tároljon el egy szót egy változóban. 
A felhasználó adjon meg egy betűt, 
amiről a program döntse el, hogy előfordul-e a szóban! 
Az eredményről tájékoztassa a felhasználót, és írja ki a tárolt szót is!
   
A felhasználónak többször is legyen lehetősége újabb tippet megadnia. A bekérés addig folytatódjon, 
amíg a felhasználó nem ad meg betűt, csupán egy ENTER-t üt!   

Igyekezz minél felhasználóbarátabbá tenni a programot! A programnak lehetnek egyéb hasznos funkciói, 
például gyűjtheti és kiírhatja a jó és a rossz tippeket (betűket).

'''

"""---
**Enter**
* A program számokat kér be mindaddig, amíg az csupán ENTER-t üt! 
* A számokat tárolja el a program egy listában! 
* Az adatbekérés befejezte után írja ki a program a lista elemeit, 
* a legkisebb és 
*a legnagyobb számot!
"""

# ZamArtem enter.py
'''Készíts egy programot, amely a felhasználótól számokat kér be mindaddig, amíg az csupán ENTER-t nem üt! 
A számokat tárolja el a program egy listában! 
Az adatbekérés befejezte után írja ki a program a lista elemeit, a legkisebb és a legnagyobb számot!
'''

"""---
**Fej vagy írás**

A program a pénzfeldobást modellezi.
* Kérdezze meg a felhasználótól a választását (fej vagy írás), 
* majd adjon tájékoztatást, hogy eltalálta-e!
"""

# ZamArtem fej_vagy_iras.py
'''
A program a pénzfeldobást modellezi.
Kérdezze meg a felhasználótól a választását (fej vagy írás), majd adjon tájékoztatást, hogy eltalálta-e!
'''

"""---
**Osztható hárommal, néggyel**

Készíts egy programot, amely a felhasználó által megadott egész számról eldönti, hogy
* A szám csak 3-mal osztható,
* a szám csak 4-gyel osztható,
* a szám 3-mal és 4-gyel is osztható,
* a szám sem 3-mal, sem 4-gyel nem osztható!'''
"""

# ZamArtem haromnegy.py
"""Készíts egy programot, amely a felhasználó által megadott egész számról eldönti, hogy
A szám csak 3-mal osztható,
a szám csak 4-gyel osztható,
a szám 3-mal és 4-gyel is osztható,
a szám sem 3-mal, sem 4-gyel nem osztható!"""

"""---
**A hosszabb szó**

* A program kérjen be két szót a felhasználótól, 
* majd írja ki, hogy melyik a hosszabb illetve azt is ha a két szó egyenlő! 

"""

# violetta2413 hosszabb_szo.py
''' 
A program kérjen be két szót a felhasználótól, 
majd írja ki, hogy melyik a hosszabb illetve azt is ha a két szó egyenlő! 
'''

"""---
**Szöveg többször**

írj egy programot, ami: 
* bekér egy számot (int), 
* majd egy tetszőlesges karakterlácot (string). 
* Ezt követően kiírja a karakterláncot csupa nagybetüvel, egymás mellé, szóközökkel elválasztva annyiszor, amennyiv a bekért egész szám volt!

```
Minta:
írj be egy egész számot: 12
írj be egy tetszőleges szöveget: hörcsög
HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG 
```
"""

# ZamArtem intszavak.py 
"""
írj egy programot, ami: bekér egy számot (int), 
majd egy tetszőlesges karakterlácot (string). 
Ezt követően kiírja a karakterláncot csupa nagybetüvel, egymás mellé, szóközökkel elválasztva annyiszor, amennyiv a bekért egész szám volt!"""

"""
Minta: (output)
1.feladat:
írj be egy egész számot: 12
írj be egy tetszőleges szöveget: hörcsög
HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG HÖRCSÖG 
"""

"""---
**Jelszó**

Írjon programot jelszo.py néven, amely azt vizsgálja, hogy egy felhasználó helyesen adja-e meg a jelszavát! 

* A program addig kérdezi újra a felhasználónév-jelszó párost, amíg a felhasználó mindkettőt hibátlanul meg nem adja. 
* A program egyetlen felhasználó (sis) jelszavát (1234) ismeri, csak ezt a párost fogadja el helyesként. 
* Mind a sikertelen, mind a sikeres bejelentkezési kísérletekről üzenetet ír a képernyőre.
"""

#  ZamArtem jelszo.py
 '''
 Írjon programot jelszo.py néven, amely azt vizsgálja, hogy egy felhasználó helyesen adja-e meg a jelszavát! 
 A program addig kérdezi újra a felhasználónév-jelszó párost, amíg a felhasználó mindkettőt hibátlanul meg nem adja. 
 A program egyetlen felhasználó (sis) jelszavát (1234) ismeri, csak ezt a párost fogadja el helyesként. 
 Mind a sikertelen, mind a sikeres bejelentkezési kísérletekről üzenetet ír a képernyőre.
'''

"""---
**Keresztnév**
* Készíts egy programot, amely a felhasználótól keresztneveket kér be egészen addig, amíg az ENTER-t nem üt (nem ad meg újabb nevet a bekérésnél)! 
* A program a bekért neveket írja ki a képernyőre!
"""

# ZamArtem Rename p1.feladatk.attila to keresztnev.py
'''
Készíts egy programot, amely a felhasználótól keresztneveket kér be egészen addig, amíg az ENTER-t nem üt (nem ad meg újabb nevet a bekérésnél)! 
A program a bekért neveket írja ki a képernyőre!
'''

"""---
**Kisebb - nagyobb - egyenlő**

* A program kérjen be két számot a felhasználótól, 
* majd írja ki, hogy melyik a nagyobb! 

```
A program üzeneteinek megfogalmazásában kövesse az alábbi mintát:
--------------
Adj meg egy számot! 1
Adj meg egy másik számot! 17
A nagyobb érték 17
--------------
Adj meg egy számot! 28
Adj meg egy másik számot! -2
A nagyobb érték: 28
---------------
Adj meg egy számot! 999
Adj meg egy másik számot! 999
A két szám egyenlő
------------------ 
```

---
**Nagyobb - egyenlő**

* A program kérjen be két számot a felhasználótól, 
* majd írja ki, hogy melyik a nagyobb! 
*A program üzeneteinek megfogalmazásában kövesse az alábbi mintát:
```
Adj meg egy számot! 1
Adj meg egy másik számot! 17
A nagyobb érték 17

Adj meg egy számot! 28
Adj meg egy másik számot! -2
A nagyobb érték: 28

Adj meg egy számot! 999
Adj meg egy másik számot! 999
A két szám egyenlő
```
"""

# ZamArtem Rename main.py to kettoegyenlo.py
'''
Nagyobb szám.
A program kérjen be két számot a felhasználótól, 
majd írja ki, hogy melyik a nagyobb! 
A program üzeneteinek megfogalmazásában kövesse az alábbi mintát:
--------------
Adj meg egy számot! 1
Adj meg egy másik számot! 17
A nagyobb érték 17
--------------
Adj meg egy számot! 28
Adj meg egy másik számot! -2
A nagyobb érték: 28
---------------
Adj meg egy számot! 999
Adj meg egy másik számot! 999
A két szám egyenlő
------------------
'''

"""---
**A legrövidebb szó**
* Írj egy programot, amely a felhasználótól bekér 3 szót, 
* ezeket egy listában tárolja, 
* és egy eljárás segítségével meghatározza, és a képernyőre kiírja, melyik a legrövidebb szó!
"""

# loczylevi Rename p1szendro_002 to legrovidebb_szo.py

"""
Írj egy programot, amely a felhasználótól bekér 3 szót, 
ezeket egy listában tárolja, 
és egy eljárás segítségével meghatározza, és a képernyőre kiírja, melyik a legrövidebb szó!
"""

#megtoldás:

"""---
**Lista összege**

Készíts egy programot, 
* amely [1;10] intervallumon generál 5 darab véletlen egész számot, 
* és ezeket tárolja el egy listában! 
* A program adja össze a lista elemeit, írja ki a képernyőre az összegüket 
* és a lista elemeit!
"""

# ZamArtem Update and rename p1.feladatk.attila5 to lista_osszege.py
 '''
Készíts egy programot, amely [1;10] intervallumon generál 5 darab véletlen egész számot, 
és ezeket tárolja el egy listában! 
A program adja össze a lista elemeit, 
írja ki a képernyőre az összegüket és a lista elemeit!
'''

"""---
**Kisebb függvény**

* Hozzon létre egy olyan függvényt, amely két érték közül visszatér a kisebb értékkel!

"""

# loczylevi Rename p1noel_002 to melyik kisebb.py
#Hozzon létre egy olyan függvényt, amely két érték közül visszatér a kisebb értékkel!
    
'''Lehetséges Megoldás'''

"""---
**Nagyobb függvény**

* Hozzon létre egy olyan függvényt, amely két érték közül visszatér a nagyobb 
értékkel!
"""

# loczylevi Rename p1noel_001 to melyik_nagyobb.py
#Hozzon létre egy olyan függvényt, amely két érték közül visszatér a nagyobb értékkel!

'''Lehetséges Megoldás'''

"""---
**Lista feltöltés, kisebb, nagyobb**

* Készíts egy programot, amely a felhasználótól számokat kér be mindaddig, amíg az 'X'-et vagy 'x'-et nem üt! 
* A számokat tárolja el a program egy listában! 
* Az adatbekérés befejezte után írja ki a program a lista elemeit, 
* a legkisebb és a 
* legnagyobb számot!
'''

"""

# kovacsbalazspeter21 Update mindadig_mig_x.py
'''
Készíts egy programot, amely a felhasználótól számokat kér be mindaddig, amíg az 'X'-et vagy 'x'-et nem üt! A számokat tárolja el a program egy listában! 
Az adatbekérés befejezte után írja ki a program a lista elemeit, a legkisebb és a legnagyobb számot!
'''

"""---
**Mondatvégi jel**

Készíts egy programot, amely a felhasználó által megadott mondatról a mondatvégi jel alapján eldönti milyen fajtájú! 
(kijelentő, kérdő, felkiáltó/felszólító)
```
A mondat fajtája: Felkiáltó/Felszólító 
A mondat fajtája: Kérdő
A mondat fajtája: Kijelentő
```
"""

# violetta2413 Rename p1violetta_005.py to mondatvégi_jel.py
'''
Készíts egy programot, amely a felhasználó által megadott mondatról a mondatvégi jel alapján eldönti milyen fajtájú! 
(kijelentő, kérdő, felkiáltó/felszólító)
'''

"""---
**E betük**
* A program számolja össze, hogy hány darab 'E' vagy 'e' betűt tartalmazó szó van a szavak listában. 
* A képernyőre írja is ki a feltételnek megfelelő szavakat!

"""

# hadaszibalazs205 Create p1.Ebetű.py
'''
A program számolja össze, hogy hány darab 'E' vagy 'e' betűt tartalmazó szó van a szavak listában. 
A képernyőre írja is ki a feltételnek megfelelő szavakat!
'''

szavak = ['Elemér', 'Emma', 'ajtó', 'róka', 'egér']

"""---
**T betük**
* A  ['ajtó','tojás','Ottó','Tamás', 'tép','Tesla','alma','python'] lista elemei közül a program kiírja a "t" és "T" betűkkel kezdődőeket!
"""

# ZamArtem Update p1.Tbetű.py
'''
A  ['ajtó','tojás','Ottó','Tamás', 'tép','Tesla','alma','python'] lista elemei közül a program kiírja a "t" és "T" betűkkel kezdődőeket!
'''

"""---
**Találd ki a számot a listában**
* Írj egy programot, amely 5 darab véletlenszámot generál [1;7] intervallumon,
és ezeket eltárolja egy listában. 
* Kérjen be a felhasználótól egy számot,
és vizsgálja meg, hogy ez előfordul-e a listában! 
* Az eredményről tájékoztassa a felhasználót,
* és írja ki a lista elemeit a képernyőre!

```
Kérek egy számot: 1
A megadott szam megtalalhato a listaban, [4, 2, 1, 2, 3]
```
"""

# ZamArtem Update p1.eldöntés.py
'''
Írj egy programot, amely 5 darab véletlenszámot generál [1;7] intervallumon,
és ezeket eltárolja egy listában. Kérjen be a felhasználótól egy számot,
és vizsgálja meg, hogy ez előfordul-e a listában! Az eredményről tájékoztassa a felhasználót,
és írja ki a lista elemeit a képernyőre!
Pld:
Kérek egy számot: 1
A megadott szam megtalalhato a listaban, [4, 2, 1, 2, 3]
'''

"""---
**Kisebb - nagyobb - egyenlő**

* Készíts egy rövid programot, amely 1 és 3 között generál véletlenszámot, 
* majd összehasonlítja ezt a felhasználó által megadott, szintén ebbe a tartományba eső számmal! 
* Az összehasonlítás eredményéről tájékoztassa a felhasználót!
"""

# hadaszibalazs205 Rename p1hadaszi.generál.py to p1.generál.py
'''
Készíts egy rövid programot, amely 1 és 3 között generál véletlenszámot, 
majd összehasonlítja ezt a felhasználó által megadott, szintén ebbe a tartományba eső számmal! 
Az összehasonlítás eredményéről tájékoztassa a felhasználót!
'''

"""---
**Páros számok a listában**
* Készíts egy programot, amely [1;10] intervallumon generál 5 darab véletlen egész számot 
* és ezeket tárolja el egy listában! 
* A program számolja össze, és képernyőre írja ki a listában tárolt páros számok számát, valamint a lista elemeit!
"""

# hadaszibalazs205 Create p1.intervallum.py
'''
Készíts egy programot, amely [1;10] intervallumon generál 5 darab véletlen egész számot 
és ezeket tárolja el egy listában! A program számolja össze, 
és képernyőre írja ki a listában tárolt páros számok számát, valamint a lista elemeit!
'''

"""---
**Kutya**

* Írj programot, amely a felhasználótól bekéri egy kutya nevét, életkorát, fajtáját, és azt hogy rendelkezik-e érvényes oltással veszettség ellen! 
* Az adatokat tárolja a program szótárban, és írja ki a képernyőre az adatszerkezetet!
"""

# hadaszibalazs205 Create p1.kutya.py
'''
Írj egy programot, amely a felhasználótól bekéri egy kutya nevét, életkorát, fajtáját, és azt hogy rendelkezik-e érvényes oltással veszettség ellen! 
Az adatokat tárolja a program szótárban, és írja ki a képernyőre az adatszerkezetet!
'''

"""---
**Macska**
* Írj egy programot, amely szótárban tárolja egy macska nevét, korát. 
* A felhasználónak legyen lehetősége megváltoztatni az egyik tárolt adatot. 
* A program írja ki a felhasználó választása alapján az egyik adatot, kérdezze meg, mire módosítsa, 
* végül írja ki a képernyőre a frissített adatszerkezetet!
"""

# hadaszibalazs205 Create p1.macska.py
'''
Írj egy programot, amely szótárban tárolja egy macska nevét, korát. 
A felhasználónak legyen lehetősége megváltoztatni az egyik tárolt adatot. 
A program írja ki a felhasználó választása alapján az egyik adatot, kérdezze meg, mire módosítsa, végül írja ki a képernyőre a frissített adatszerkezetet!
'''

"""---
**Mondat fajtája**
* Készíts egy programot, amely a felhasználó által megadott mondatról a mondatvégi jel alapján eldönti milyen fajtájú! (kijelentő, kérdő, felkiáltó / felszólító / óhajtó)
"""

# hadaszibalazs205 Update p1.mondatvége.py
'''
Készíts egy programot, amely a felhasználó által megadott mondatról a mondatvégi jel alapján eldönti milyen fajtájú! (kijelentő, kérdő, felkiáltó / felszólító / óhajtó)
'''

"""---
**Lista legkisebb eleme függvény**
* Írj egy programot, ami addig kér be egész pozitív számokat, amíg a felhasználó negtív számot nem ír! 
* A megadott számokat tárolja a program egy listában, és ezt adja át paraméterként egy függvények, amely a lista legkisebb elemével tér vissza. 
* A program írja ki, hogy melyik volt a megadott legkisebb szám!
"""

# hadaszibalazs205 Create p1.pozitív&negatív.py
'''
Írj egy programot, ami addig kér be egész pozitív számokat, amíg a felhasználó negtív számot nem ír! 
A megadott számokat tárolja a program egy listában, és ezt adja át paraméterként egy függvények, amely a lista legkisebb elemével tér vissza. 
A program írja ki, hogy melyik volt a megadott legkisebb szám!
'''

"""---
**Fej vagy írás**

* A program a pénzfeldobást modellezi. 
* Kérdezze meg a felhasználótól a választását (fej vagy írás), 
* majd adjon tájékoztatást, hogy eltalálta-e!
"""

# hadaszibalazs205 Rename p1hadaszi.pénzfeldobás.py to p1.pénzfeldobás.py
'''
A program a pénzfeldobást modellezi. Kérdezze meg a felhasználótól a választását (fej vagy írás), majd adjon tájékoztatást, hogy eltalálta-e!
'''

"""---
**Találd ki a számot**

* Készíts egy rövid programot, amely 1 és 10 között generál véletlenszámot, 
* majd összehasonlítja ezt a felhasználó által megadott, szintén ebbe a tartományba eső számmal! 
* A bekérés addig folytatódjon ameddig a felhasználó nem ad meg negatív számot! * Az összehasonlítás eredményéről tájékoztassa a felhasználót!
"""

# hadaszibalazs205 Create p1.véletlenszam.py
'''
Készíts egy rövid programot, amely 1 és 10 között generál véletlenszámot, majd összehasonlítja ezt a felhasználó által megadott, szintén ebbe a tartományba eső számmal! A bekérés addig folytatódjon ameddig a felhasználó nem ad meg negatív számot! Az összehasonlítás eredményéről tájékoztassa a felhasználót!
'''

"""---
**FizzBuzz**

* Hozzon létre egy számsorozatot 0-tól 100-ig,
* ami 3-mal osztható annál írja ki, hogy 'Fizz'
* ami 5-tel osztható annál írja ki, hogy 'Buzz'
* ami 3-mal és 5-tel is osztható annál írja li, hogy 'FizzBuzz'
* Ami se 3-mal se 5-tel nem osztható annál írjuk ki a magát a számot!

```
Minta: (az első 10 sor)
FizzBuzz
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
```
"""

# loczylevi Create p1_fizzbuzz.py
"""
Hozzon létre egy számsorozatot 0-tól 100-ig,
ami 3-mal osztható annál írja ki, hogy 'Fizz'
ami 5-tel osztható annál írja ki, hogy 'Buzz'
ami 3-mal és 5-tel is osztható annál írja li, hogy 'FizzBuzz'
Ami se 3-mal se 5-tel nem osztható annál írjuk ki a magát a számot!
"""

"""Minta: (az első 10 sor output)
FizzBuzz
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
"""

"""---
**Kisebb - nagyobb**

* Kérjen be a felhasználotol két egész számot (int) és tárolja el őket. 
* írja ki, hogy melyik a nagyobb és melyik a kisebb szám! 
* Ha két szám egyenlő, akkor azt is jelezze!
```
Minta:
Kérem az első számot: 12
Kérem az második számot: 3
A nagyobb szám 12, a kisebb 3.

Kérem az első számot: -1
Kérem az második számot: 16
A nagyobb szám 16, a kisebb -1.

Kérem az első számot: 8
Kérem az második számot: 8
A két szám egyenlő.
```
"""

# loczylevi Create p1_kisebb_nagyobb.py
"""
Kérjen be a felhasználotol két egész számot (int) és tárolja el őket. írja ki, hogy melyik a nagyobb és melyik a kisebb szám! Ha két szám egyenlő, akkor azt is jelezze!
Minta:
Kisebb-nagyobb meghatározása
Kérem az első számot: 12
Kérem az második számot: 3
A nagyobb szám 12, a kisebb 3.

Kérem az első számot: -1
Kérem az második számot: 16
A nagyobb szám 16, a kisebb -1.

Kérem az első számot: 8
Kérem az második számot: 8
A két szám egyenlő.
"""

"""---
**A páros számok száma**

* Készíts egy programot, amely [1;10] intervallumon generál 5 darab véletlen egész számot 
* és ezeket tárolja el egy listában! 
* A program számolja össze és írja ki a képernyőre a 
listában tárolt páros számok számát, 
* valamint a lista elemeit! 
"""

# violetta2413 Rename p1violetta_002.py to paros_szamok.py
''' 
Készíts egy programot, amely [1;10] intervallumon generál 5 darab véletlen egész számot 
és ezeket tárolja el egy listában! 
A program számolja össze és írja ki a képernyőre a 
listában tárolt páros számok számát, valamint a lista elemeit! 
'''

"""---
**A páros számok száma**

* Készíts egy programot, amely [1;10] intervallumon generál 5 darab véletlen egész számot 
* és ezeket tárolja el egy listában! 
* A program számolja össze és írja ki a képernyőre a 
listában tárolt páros számok számát, 
* valamint a lista elemeit! 
"""

# loczylevi Rename p1noel_005 to paros_szamok2.py
'''
Készíts egy programot, amely [1;10] intervallumon generál 5 darab véletlen egész számot 
és ezeket tárolja el egy listában!
A program számolja össze, és képernyőre írja ki a listában tárolt páros számok számát, valamint a lista elemeit!
'''

"""---
**A lista hárommal oszható számai**

* A lista [120, 9, 5, 24, 6, 17, -45, 92, 15, 48, 57] elemei közül a program kiírja a 3-mal osztható páros számokat!

"""

# ZamArtem Rename p1.feladatk.attila2 to parosharom.py
'''
A lista [120, 9, 5, 24, 6, 17, -45, 92, 15, 48, 57] elemei közül a program kiírja a 3-mal osztható páros számokat!
'''

"""---
**A lista legkisebb és legnagyobb eleme**

* A lista [120, 9, 5, 24, 6, 17, -45, 92, 15, 48, 57] elemei közül a program kiírja a 3-mal osztható páros számokat!

"""

# ZamArtem Update and rename p1.feladatk.attila3 to szamokenter.py
'''
Készíts egy programot, amely a felhasználótól számokat kér be mindaddig, amíg az csupán ENTER-t nem üt! 
A számokat tárolja el a program egy listában! Az adatbekérés befejezte után írja ki a program a lista elemeit, a legkisebb és a legnagyobb számot!
'''

"""---
**Számsorozat összege**

* A felhasználátol kérjen be egy számot, és az ebből készített számsorozatot adja össze, majd írja ki.
"""

# kovacsbalazspeter21 Update and rename osszead.py to szamsorozat.py
#A felhasználátol kérjen be egy számot, és az ebből készített számsorozatot adja össze, majd írja ki.

#példa
'''
kérek egy számot: 10
55
'''

"""---
**Két szám töbszörösei függvény**

* Hozzon létre egy függvényt, amely két számot vesz argumentumként (szám, hossz)
* és a szám többszöröseinek listáját adja vissza, amíg a lista hossza el nem éri a hosszúságot.

```
példa: list_of_multiples(7, 5) ➞ [7, 14, 21, 28, 35]
```
"""

# loczylevi Rename p1noel_004 to szorzotabla.py
'''
Hozzon létre egy függvényt, amely két számot vesz argumentumként (szám, hossz),
és a szám többszöröseinek listáját adja vissza, amíg a lista hossza el nem éri a hosszúságot.

példa: list_of_multiples(7, 5) ➞ [7, 14, 21, 28, 35]
'''

"""---
**Utolsó számjegy**
* Készíts egy programot, ami bekér egy számot a felhasználótól 
* és kiírja a képernyőre az utolsó számjegyét!
"""

# violetta2413 Rename p1violetta_004.py to utolso_szamjegy.py
'''
Készíts egy programot, ami bekér egy számot a felhasználótól 
és kiírja a képernyőre az utolsó számjegyét!
'''

"""---
**Számkitaláló**
* Készíts egy rövid programot, amely 1 és 3 között generál véletlenszámot, 
* majd összehasonlítja ezt a felhasználó által megadott, szintén ebbe a tartományba eső számmal! 
* Az összehasonlítás eredményéről tájékoztassa a felhasználót!
"""

# kovacsbalazspeter21 Add files via upload veletlen.py 
"""
Készíts programot, amely 1 és 3 között generál véletlenszámot, 
majd összehasonlítja ezt a felhasználó által megadott, szintén ebbe a tartományba eső számmal! 
Az összehasonlítás eredményéről tájékoztassa a felhasználót!
"""

"""---
**Páros számok 1 és 10 között**

Írj egy programot while ciklussal amely kiírja a páros számokat 1 és 10 között!
"""

# kovacsbalazspeter21 Add files via upload while.py 
'''
Írj programot while ciklussal amely kiírja a páros számokat 1 és 10 között!
'''